interface Arena {
    /**
     * fight
     */
    public fight(Mech mech1, Mech mech2): Result;
}

class Logger {
    /**
     * log
     */
    public log(message: string) {
        console.log(message)
    }
}

class DBLogger {
    constructor(private DBConnection db)
    /**
     * log
     */
    public log(message: string) {
        db.insert(message);
    }
}

interface DrawResolutionStrategy {
    /**
     * resolve
     */
    public resolve(mech1: Mech, mech2: Mech): Mech;
}

class RandomDrawResolutionStrategy {
    public resolve(mech1: Mech, mech2: Mech): Mech {
        return [mech1, mech2].randomIndex();
    }
}
class ArenaImpl implements Arena {
    constructor(private DrawResolutionStrategy drawStrategy, LoggerInterface logger) {
    }

    public fight(Mech mech1, Mech mech2): Result {
        Logger.log('Fight has begun between whoever')
        while () {
        }
    }
}

class SimpkleArena implements Arena {
    /**
     * fight
     */
    public fight(Mech mech1, Mech mech2, Referee referee) {
        if (mech1.strength > mech2.strengthcondition) {
            retrun new Result(mech1, mech2)
        }
    }
}

interface Match {
    playRound();
}

{
    mech1: 123,
        mech2: 345,
            arena: "SIMPLE_ARENA"
}

class ArenaFactory {
    create(name: string) {
        switch (arg):
            case SIMPLE_ARENA:
                return new SimpleArena
            case COMPLICATED_ARENA:
                return new ComplicatedArena()
        }
    }
